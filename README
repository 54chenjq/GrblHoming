                        ---- GrblController ----

GrblController is a gcode sender, monitor and homing tool for GRBL for 
Mac, Windows and Linux systems written using the Qt Desktop Framework in C++.

Enhanced by Zapmaker. Kosme did a great deal of excellent foundation work on this 
project.

Version 3.0 is a near-complete rewrite of the C++ code fixing all known bugs.
The other major enhancement is native Mac OSX support (including older 32 bit Intel 10.5).

The code was tested with real milling projects using the Shapeoko and works
pretty well. For a list of possible future enhancements, see file TODO.

Prebuilt binaries/installers can be found on github's download section for this
project (GrblHoming). Alternately, if you download the (a) Qt SDK from Nokia or 
(b) the Qt source from Qt Project along with the standalone Qt Creator, you can
build from source.

Details on how to do this can be found here:
http://zapmaker.org/

V3.2
Enhancements
- Support for "Aggressive Preload" of commands when sending file to Grbl
  * File's lines are sent to Grbl as fast as Grbl can take it, allowing
    Grbl to optimize acceleration. Some files have been observed to take
	1/3 the time to complete!
  * Modeled after Grbl's own python script (computes/predicts how much
    space is available in Grbl's input buffer)
  * Due to the additional processing, CPU usage is greater than normal mode
    and it has been optimized to run fine on a Raspberry Pi
  * Normal (non-preload) mode is the default
  * Response processing code now waits until a line has been received rather
    than collect a long stream to behave like the python script
  * LCD updates have been set to be roughly once every second independent
    of rate of line sends/preloads
- Z-rate limit feature now includes default xy rate setting
  * Z rate limiting only occurs during file sends. If z is included with x&y
    then they are split into two commands automatically and the xy rate setting
	is used for the xy portion
  * Since feed rate is modal, code will fix any subsequent xy items that are 
    missing feed rate specifiers (cambam correctly adds them, but others may not)
- Replaced basic logging with Log4Qt logging capabilities.
  * Support for error, warning, info, debug message types. All messages are timestamped.
  * More diagnostic messages added, mainly around sending and receiving from com ports
  * Only error and warning are displayed in release build, all are displayed in debug.
  * If the user enables file logging, all messages are stored regardless of build type
  * File is output to user's home folder
  * If you enable or disable logging to file, you must restart Grbl Controller
  * You can split out diagnostic from status messages by grepping for (DIAG) or (STATUS)
- Changed menus so that the first menu is File > Exit. Menus now use accelerators

Bug Fixes
- Fixed problems with z-rate limit feature, previous version was not implemented correctly.
- Fixed subtle issues with sending bytes to COM port
  * On really fast Windows PCs, the default timeout values would occasionally result in
    a line not being sent. This was fixed by changing the write timeout from 10 to
	500 ms by hardcoding it into the QextSerialPort library. This was only observed in
	aggressive preload mode, never in normal mode.

Known issues
- New reponse line detect mode requires more processing because mainly of the faster
  stream of status messages. To get around this, certain features have been disabled
  in the status view so that CPU usage is manageable on the Raspberry Pi, specifically
  the horizontal scroll bar is not available. Turn on file logging if you wish to see
  the entire line.
- When using aggressive preload, any error messages returned by Grbl are not synced
  to sent messages (they come back randomly). This can be confusing.
- If running preload, it can take longer for steppers to stop after a Stop command
  due to the number of items in Grbl's queue. The only way to stop sooner is to 
  press Close / Reset button
- Under exteme CPU loads (unlikely to occur with recent optimizations), the "runtime"
  display does not display accurate times, oddly, it displays the same time that would
  occur if not under load
  
Tested on cardboard using file provided by user:
- Windows 7 64bit, 0.8c, aggressive mode (~4 minute run)
- Windows 7 64bit, 0.8c, normal mode (~10 minute run)
- Windows 7 64bit, 0.8a, aggressive mode(~4 minute run)
- Raspberry Pi, 0.8c, aggressive mode (~4 minute run)
- Raspberry Pi, 0.8c, aggressive mode and z-limit (~6 minute run)

V3.1.2  (unofficial release, optimizations for Raspberry Pi)
Enhancements
- Optimized multiline write to status window to use faster list-based approach
- Removed unnecessary main window repaint after every line added to status window
- Fixed options window text positioning so that it appears proper on the pi

V3.1.1 (unofficial release, adjustments for Raspberry Pi)
Enhancements
- Changed measurement units in LCD from "inches" to "in" (cosmetic)
- Shortened text and adjusted main window layout for the text size on the pi

V3.1
Enhancements
- Supports Grbl 0.8c. Still supports 0.8a. 0.51 is supported but without LCDs.
- Grbl settings dialog is now a table of dynamic length depending on # of params.
- LCD position data is now obtained from Grbl and is *not* computed
- Added LCD displays for both machine and work coordinates
- Cycling of Grbl via COM port toggling has been completely removed, except
  that Close button has now been renamed Close / Reset.
- Position data on Grbl is persisted as long as possible to allow for repositioning, etc.
- Zero work coordinates has been added (G92)
- Go-to-home feature added (lifts tool 5 mm and traverses to x=0, y=0)
- Option to put manual command (back) into absolute mode after jog button command
- Grbl Soft reset (Ctrl-X) button added
- Z-axis rate limiting capability added. Only affects file, not jog or manual commands.
- User is required to specify which measurement mode they are using, mm or inches:
  * Default is millimeters
  * Grbl is configured to operate in either mm or inches
  * If a file is sent in inches and user is in mm, it will auto-restore to mm
    after the file has been sent (and vice-versa, mm->inches)
- 0.8c enhancements:
  * Displays current Grbl state (i.e. Run, Idle, etc.)
  * LCDs display whether values are in inches or millimeters
  * Unlock Grbl button added ($X)
  * Determines and sets parser state for current mm/inch command mode ($G)
  * Determines and sets coordinate units via $13
- Removed annoying "No movement expected for command" message
- Flags that cross threads have been changed to use QAtomicInt
- Version is now shown in title bar
- A basic log file feature has been added
- Runs on the Raspberry Pi!

Known Issues
- The registry key product name has been changed from GCodeSender to GrblController
  *** WARNING: Old settings are not migrated ****
- Switching between millimeters and inches works, but has not been fully tested
- Go to home has not been fully tested with inches mode
- Manually issuing $13 or G20/G21 can confuse the program

V3.0
Enhancements
- Nearly a full code rewrite to ensure ease-of-use and robustness
- Percentage complete progress bar for files; also shows time elapsed sending file.
- Reset button now cycles COM port which causes Arduino to stop steppers and
  reinitialize position to 0,0,0 (No more manual Auduino resets!)
- Settings configurations are now stored using QSettings class for platform independence.
- Only available COM ports are now shown. Uses third-party QextSerialPort library.
- App remembers last COM port used, last folder, last file extension used after restart
- Ability to configure wait-for-response time
- Status list window now shows both sent and received data
- Error responses are ignored during file send (nearly 100% of the time they are not important)
- Z-jog speed using buttons is configurable
- Radio buttons to select mode have been removed in favor of enabling/disabling widgets based
  on current context. This simplifies usage.
- Popups have been removed in favor of writing errors to status list window

Bug fixes
- Overall code hardening
- Properly implementing Qt signals and slots across the board

Build verification
- Windows 7 64 bit using MinGW
- Inno Setup for Windows, installs successfully on Windows 7
- Mac OSX Mountain Lion, target 64 bit and 32 bit executables
- Qt Mac installer successfully installs and runs on Mountain Lion and 10.5 32 bit Intel
- Linux: Builds successfully on Debian 6, Ubuntu 12.10

V2.1x1

NOTE: Changes were only focused on Arduino GRBL capabilities with the Shapeoko, so 
things like Tool Change were not tested.

Enhancements
- Improved handling of response code - this is the most significant change as it 
ensures reliable send/response handling when sending a file to the Grbl processor.
- Manual command now allows hitting return and command is sent. No need to press Go.
- Default job step size changed from 0.01 to 1 mm
- Compiles and runs under Linux now (tested with Debian and latest Qt)
- Works with old 168 Arduino processor (except that old code is buggy and not recommended)
- Disabled "go to home at end of job". The arduino code doesn't handle it correctly 
and mills straight back into and through your work. Checkbox in settings has no effect.

Bug fixes
- Fixed crash when options file is not present the first time run
- Fixed crash when trying to get GRBL settings from device
- Settings work with 168 (8 settings) and 328 processors (10 settings)
- Fixed Stop to call proper routine stopsig - now Stop button works correctly

-------------------------------------------------------------
Fork by Zapmaker at this rev
-------------------------------------------------------------
v2.1a

Bug fixes

- Corrected an issue that caused the program to crash if the g-code had blank lines.

V2.1 

New Features

- Gcode that is valid but is not recognized by GRBL gets filtered and it is not sent.

Bug fixes

- Corrected an issue that prevented manually sent Gcode for being displayed correctly.
- Corrected an issue with the images not displaying.

V2.0 Major release

- Improved the port handling reducing opening and closing frecuency.
- Added the ability to type and send commands directly. 
- Support for tool change instructions. If enabled it pauses execution, raises the spindle, goes to a fixed location for toolchange, waits for tool change, and continues excecution.
- Added About window.

V1.0c Minor

Bug fixes

- Corrected a problem when adjusting axis that caused all axis to move at the same time. Caused by grbl starting in incremental programming.

V1.0b Minor

Bug fixes

- Corrected a bug in the adjusting script.

V1.0a Minor

Bug fixes

- Fixed a bug reading some file formats that avoided the dials from updating.

